# -*- ruby -*-

require_relative "../packages-groonga-org-package-task"

class GroongaAptSourcePackageTask < PackagesGroongaOrgPackageTask
  def initialize
    super("groonga-apt-source",
          repository_version,
          latest_commit_time(File.join(__dir__, "..")))
  end

  def define
    super
    define_apt_latest_task
  end

  private
  def define_archive_task
    file @archive_name do
      rm_rf(@archive_base_name)
      mkdir(@archive_base_name)
      repository_gpg_key_ids.each do |gpg_key_id|
        unless system("gpg", "--list-keys", gpg_key_id, out: IO::NULL)
          sh("gpg",
             "--keyserver", "keyserver.ubuntu.com",
             "--recv-key", gpg_key_id)
        end
      end
      sh("gpg", "--armor", "--export", *repository_gpg_key_ids,
         out: "#{@archive_base_name}/keys")
      sh("tar", "czf", @archive_name, @archive_base_name)
      rm_rf(@archive_base_name)
    end
  end

  def apt_targets_default
    [
      "debian-buster",
      "debian-bullseye",
      "ubuntu-bionic",
      "ubuntu-focal",
      "ubuntu-impish",
      "ubuntu-jammy",
    ]
  end

  def define_apt_latest_task
    namespace :apt do
      apt_targets.each do |target|
        distribution, code_name = target.split("-", 2)
        case distribution
        when "ubuntu"
          component = "universe"
        else
          component = "main"
        end
        deb = [
          apt_dir,
          "repositories",
          distribution,
          "pool",
          code_name,
          component,
          @package[0],
          @package,
          "#{@package}_#{@version}-#{@deb_release}_all.deb",
        ].join("/")
        latest_deb = [
          apt_dir,
          "repositories",
          distribution,
          "#{@package}-latest-#{code_name}.deb",
        ].join("/")
        file latest_deb => deb do
          cp(deb, latest_deb)
        end
        task :latest => latest_deb

        debs = [latest_deb]
        case target
        when "debian-buster",
             "debian-bullseye",
             "ubuntu-bionic",
             "ubuntu-focal"
          # For backward compatibility.
          # Users can install the apt-source package by
          # the old "apt install ./XXX-archive-keyring_*.deb".
          pakcage_archive_keyring =
            @package.gsub(/apt-source\z/, "archive-keyring")
          latest_archive_keyring_deb = [
            apt_dir,
            "repositories",
            distribution,
            "#{pakcage_archive_keyring}-latest-#{code_name}.deb",
          ].join("/")
          file latest_archive_keyring_deb => deb do
            cp(deb, latest_archive_keyring_deb)
          end
          task :latest => latest_archive_keyring_deb
          debs << latest_archive_keyring_deb
        end

        debs.each do |deb|
          repository_gpg_key_ids.each do |gpg_key_id|
            deb_asc = "#{deb}.asc.#{gpg_key_id}"
            file deb_asc => deb do
              rm_f(deb_asc)
              sh("gpg",
                 "--armor",
                 "--detach-sign",
                 "--local-user", gpg_key_id,
                 "--output", deb_asc,
                 deb)
            end
            task :latest => deb_asc
          end
        end
      end
      task :release => :latest
    end
  end

  def enable_ubuntu?
    false
  end

  def enable_yum?
    false
  end
end

task = GroongaAptSourcePackageTask.new
task.define

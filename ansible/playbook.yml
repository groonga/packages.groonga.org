- hosts: package_servers
  vars:
    groonga_admin_version: 0.9.5
    ruby: ruby3.2
    ruby_api_version: 3.2.0
    passenger_version: 6.0.27
  vars_files:
    - vars/private.yml
  become: yes
  tasks:
    # Base
    - name: Set host name
      copy:
        content: "{{ inventory_hostname }}"
        dest: /etc/hostname
    - name: Install base packages
      apt:
        name:
          - apt-listchanges
          - apt-transport-https
          - apticron
          - git
          - iotop
          - logrotate
          - lv
          - ruby
          - ruby-dev
          - systemd-timesyncd
          - unattended-upgrades
          - vim
          - zsh
    - name: Use VIM as the default editor
      command: update-alternatives --set editor /usr/bin/vim.basic
    - name: Use e-mail for apt-listchanges
      lineinfile:
        path: /etc/apt/listchanges.conf
        regexp: "^frontend="
        line: "frontend=mail"
    - name: Reboot automatically when package upgrade requires restart
      lineinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        regexp: "^(//)?Unattended-Upgrade::Automatic-Reboot "
        line: "Unattended-Upgrade::Automatic-Reboot \"true\";"
    - name: Send notification when packages upgraded automatically
      lineinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        regexp: "^(//)?Unattended-Upgrade::Mail "
        line: "Unattended-Upgrade::Mail \"root\";"
    - name: Enable NTP
      command: timedatectl set-ntp true
    - name: "sudo: NOPASSWD"
      copy:
        src: etc/sudoers.d/sudo-nopasswd
        dest: /etc/sudoers.d/sudo-nopasswd
        mode: 0400

    # Packages
    - name: Install packages for packages
      apt:
        name:
          - apt-utils
          - bundler
          - createrepo-c
          - devscripts
          - gh
          - gnupg2
          - gpg
          - rpm
          - rsync
    - name: Create "packages" user
      user:
        name: packages
    - name: Create directories
      file:
        path: ~packages/{{ item }}
        state: directory
        owner: packages
        group: packages
      with_items:
        - bin/
        - public/
        - tasks/
        - webhook/lib/
        - webhook/lib/deployer/
        - webhook/public/
        - webhook/tmp/
    - name: Put ~packages/.forward
      copy:
        content: "packages@groonga.org"
        dest: ~packages/.forward
        owner: packages
        group: packages
    - name: Create ~packages/.ssh/
      file:
        path: ~packages/.ssh
        state: directory
        owner: packages
        group: packages
        mode: 0700
    - name: Put ~packages/.ssh/authorized_keys
      copy:
        src: home/packages/.ssh/authorized_keys
        dest: ~packages/.ssh/authorized_keys
        owner: packages
        group: packages
        mode: 0600
    - name: Put ~packages/Rakefile and related files
      copy:
        src: home/packages/{{ item }}
        dest: ~packages/{{ item }}
        owner: packages
        group: packages
      with_items:
        - Gemfile
        - Rakefile
        - tasks/archive-task.rb
        - tasks/github-client.rb
        - tasks/release.rb
        - tasks/repository-task.rb
        - tasks/state.rb
    - name: Put ~packages/webhook/ and related files
      copy:
        src: home/packages/webhook/{{ item }}
        dest: ~packages/webhook/{{ item }}
        owner: packages
        group: packages
      with_items:
        - Gemfile
        - config.ru
        - lib/deployer.rb
        - lib/deployer/app.rb
        - lib/deployer/error.rb
        - lib/deployer/payload.rb
        - lib/deployer/response.rb
    - name: Remove Gemfile.lock
      file:
        path: ~packages/{{ item }}/Gemfile.lock
        state: absent
      with_items:
        - .
        - webhook
    - name: Update gems
      become_user: packages
      shell: |
        bundle config bin bin
        bundle config path vendor/bundle
        bundle install
      args:
        chdir: ~packages/{{ item }}
      vars:
        ansible_ssh_pipelining: true
      with_items:
        - .
        - webhook
    - name: Restart webhook
      file:
        path: ~packages/webhook/tmp/restart.txt
        state: touch
    - name: Put ~packages/gpg-key.asc
      template:
        src: home/packages/gpg-key.asc.jinja
        dest: ~packages/gpg-key.asc
        owner: packages
        group: packages
        mode: 0600
    - name: Import GPG key
      become_user: packages
      shell: |
        gpg --import < gpg-key.asc
      args:
        chdir: ~packages/
      vars:
        ansible_ssh_pipelining: true
    - name: Put .env
      template:
        src: home/packages/{{ item }}.jinja
        dest: ~packages/{{ item }}
        owner: packages
        group: packages
        mode: 0600
      with_items:
        - .env.groonga
        - .env.mroonga
        - .env.pgroonga
        - webhook/.env

    # Let's encrypt
    - name: Install certbot
      apt:
        name: certbot
    - name: "Check Let's Encrypt certificate"
      stat:
        path: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
      register: certificate
    - name: "Stop Apache before initializing Let's Encrypt certificate"
      service:
        name: apache2
        state: stopped
      when: not certificate.stat.exists
    - name: "Initialize Let's Encrypt certificate"
      shell: |
        certbot certonly \
          --standalone \
          --non-interactive \
          --agree-tos \
          --email groonga@groonga.org \
          --domain {{ inventory_hostname }}
      when: not certificate.stat.exists
    - name: "Put Let's Encrypt update script"
      copy:
        src: etc/letsencrypt/renewal-hooks/{{ item }}
        dest: /etc/letsencrypt/renewal-hooks/{{ item }}
        mode: 0700
      with_items:
        - pre/stop-apache2
        - post/start-apache2

    # Apache
    - name: Install Apache and related packages
      apt:
        name:
          - apache2
          - apache2-dev
          - libapr1-dev
          - libaprutil1-dev
          - libcurl4-openssl-dev
          - libssl-dev
          - zlib1g-dev
    - name: Install Passenger
      gem:
        name: passenger
        version: "{{ passenger_version }}"
        user_install: no
      register: passenger
    - name: Build Passenger
      command: passenger-install-apache2-module --languages ruby --auto
      when: passenger.changed
    - name: Put Passenger configuration files
      template:
        src: etc/apache2/mods-available/{{ item }}.jinja
        dest: /etc/apache2/mods-available/{{ item }}
      with_items:
        - passenger.conf
        - passenger.load
      register: passenger_config_files
    - name: Enable Passenger
      command: a2enmod passenger
      notify:
        - Restart Apache
      when: passenger_config_files.changed
    - name: Put Apache configuration
      copy:
        src: "{{ item }}"
        dest: /{{ item }}
      with_items:
        - etc/apache2/sites-available/packages.groonga.org.conf
    - name: Enable our Apache configuration
      command: a2ensite packages.groonga.org
    - name: Disable default Apache configuration
      command: a2dissite 000-default
      notify:
        - Restart Apache
    - name: Enable Apache modules
      command: a2enmod {{ item }}
      with_items:
        - ssl
      notify:
        - Restart Apache
    - name: Increase Apache log rotate days
      lineinfile:
        path: /etc/logrotate.d/apache2
        regexp: "^(\\s+)rotate "
        line: "\\1rotate -1"
        backrefs: yes

    # Postfix
    - name: Install Postfix
      apt:
        name: postfix
    - name: Set /etc/aliases
      copy:
        src: etc/aliases
        dest: /etc/aliases
      notify:
        - Update /etc/aliases
    - name: Set /etc/mailname
      copy:
        content: "{{ inventory_hostname }}"
        dest: /etc/mailname
    - name: Put Postfix configuration
      copy:
        src: etc/postfix/main.cf
        dest: /etc/postfix/main.cf
      notify:
        - Restart Postfix

    # # Groonga
    # - name: Enable Groonga APT repository
    #   apt_repository:
    #     repo: ppa:groonga/ppa
    # - name: Install groonga-httpd
    #   apt: name={{ item }}
    #   with_items:
    #     - groonga-bin
    #     - groonga-httpd
    # - name: Download Groonga Admin
    #   get_url:
    #     url=https://packages.groonga.org/source/groonga-admin/groonga-admin-{{ groonga_admin_version }}.tar.gz
    #     dest=/usr/local/src/
    # - name: Install Groonga Admin
    #   unarchive:
    #     copy=no
    #     src=/usr/local/src/groonga-admin-{{ groonga_admin_version }}.tar.gz
    #     dest=/usr/local/share/
    # - name: Put groonga-httpd configuration
    #   template:
    #     src=etc/groonga/httpd/groonga-httpd.conf.j2
    #     dest=/etc/groonga/httpd/groonga-httpd.conf
    #   notify:
    #     - Restart Groonga

    # # Fluentd
    # - name: Install GPG key of Fluentd APT repository
    #   apt_key:
    #     url=http://packages.treasuredata.com/GPG-KEY-td-agent
    # - name: Install Fluentd APT repository
    #   apt_repository:
    #     repo="deb [arch=amd64] http://packages.treasuredata.com/2/ubuntu/trusty/ trusty contrib"
    # - name: Install Fluentd
    #   apt: name={{ item }}
    #   with_items:
    #     - td-agent
    # - name: Install Fluentd plugins
    #   gem:
    #     executable=/usr/sbin/td-agent-gem
    #     name={{ item }}
    #     state=latest
    #     user_install=no
    #   with_items:
    #     - fluent-plugin-anonymizer
    #     - fluent-plugin-groonga
    #     - fluent-plugin-parser
    #   notify:
    #     - Restart Fluentd
    # - name: Add "td-agent" user to "adm" groups
    #   user:
    #     name=td-agent
    #     groups=adm
    # - name: Create directories
    #   file:
    #     path={{ item }}
    #     state=directory
    #     owner=td-agent
    #     group=td-agent
    #   with_items:
    #     - /var/spool/td-agent/
    #     - /var/spool/td-agent/buffer/
    # - name: Ensure salt for fluent-plugin-anonymizer
    #   shell: apg -a 1 -n 1 -m 20 > /etc/td-agent/anonymizer-salt.txt
    #   args:
    #     creates: /etc/td-agent/anonymizer-salt.txt
    # - name: Set permission for salt file
    #   file:
    #     path=/etc/td-agent/anonymizer-salt.txt
    #     mode=0600
    #     owner=td-agent
    #     group=td-agent
    # - name: Put fluentd.conf
    #   copy:
    #     src=etc/td-agent/td-agent.conf
    #     dest=/etc/td-agent/td-agent.conf
    #   notify:
    #     - Restart Fluentd

  handlers:
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
    - name: Update /etc/aliases
      command: postalias /etc/aliases
    - name: Restart Postfix
      service:
        name: postfix
        state: restarted
    - name: Restart Groonga
      service:
        name: groonga-httpd
        state: restarted
        enabled: yes
    - name: Restart Fluentd
      service:
        name: td-agent
        state: restarted

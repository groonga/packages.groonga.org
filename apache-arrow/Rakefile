# -*- ruby -*-

require_relative "../packages-groonga-org-package-task"

class ApacheArrowPackageTask < PackagesGroongaOrgPackageTask
  def initialize
    super("apache-arrow", "18.0.0", Time.new(2024, 10, 28))
  end

  private
  def define_archive_task
    file @archive_name do
      touch(@archive_name)
    end
  end

  def download_files(base_directory,
                     repositories_directory,
                     *patterns)
    base_url = "https://apache.jfrog.io/artifactory/arrow/#{base_directory}"
    URI.open(base_url) do |index|
      index.read.scan(/<a href="(.*?)"/) do |href,|
        next if href.end_with?(".asc")
        next if href.end_with?(".sha512")
        next unless patterns.any? {|pattern| pattern.match?(href)}
        download("#{base_url}/#{href}",
                 "#{repositories_directory}/#{base_directory}/#{href}")
      end
    end
  end

  def apt_targets
    [
      # We want to remove debian-bookworm because we want to use the
      # official Apache Arrow APT repository. But we keep this only
      # for Zulip. Zulip uses packages.groonga.org temporary when the
      # official Apache Arrow APT repository was down.
      "debian-bookworm",
      "ubuntu-focal",
    ]
  end

  def apt_build
    apt_targets.each do |target|
      distribution, code_name = target.split("-", 2)
      base_directory = "#{distribution}/pool/#{code_name}/main/"
      base_directory << "#{@package[0]}/"
      base_directory << "#{@package}"
      download_files(base_directory,
                     "#{apt_dir}/repositories",
                     /\A#{Regexp.escape(@package)}_#{Regexp.escape(@version)}/,
                     /_#{Regexp.escape(@version)}-\d+_(?:amd64|arm64)\.deb\z/)
    end
  end

  def enable_ubuntu?
    false
  end

  def yum_targets
    [
      "almalinux-8",
    ]
  end

  def yum_build
    yum_targets.each do |target|
      components = target.split("-")
      distribution = components[0..-2].join("-")
      version = components.last

      rpm_base_directory = "#{distribution}/#{version}/x86_64/Packages"
      download_files(rpm_base_directory,
                     "#{yum_dir}/repositories",
                     /-#{Regexp.escape(@version)}-\d+\.[^.]+\.x86_64\.rpm\z/)

      rpm_base_directory = "#{distribution}/#{version}/aarch64/Packages"
      download_files(rpm_base_directory,
                     "#{yum_dir}/repositories",
                     /-#{Regexp.escape(@version)}-\d+\.[^.]+\.aarch64\.rpm\z/)

      srpm_base_directory = "#{distribution}/#{version}/Source/SPackages"
      download_files(srpm_base_directory,
                     "#{yum_dir}/repositories",
                     /-#{Regexp.escape(@version)}-\d+\.[^.]+\.src\.rpm\z/)
      mv("#{yum_dir}/repositories/#{distribution}/#{version}/Source",
         "#{yum_dir}/repositories/#{distribution}/#{version}/source")
      mv("#{yum_dir}/repositories/#{distribution}/#{version}/source/SPackages",
         "#{yum_dir}/repositories/#{distribution}/#{version}/source/SRPMS")
    end
  end
end

task = ApacheArrowPackageTask.new
task.define
